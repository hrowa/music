{"version":3,"sources":["data.js","components/Player.js","components/Song.js","components/LibrarySong.js","components/Library.js","components/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["chillHop","name","cover","artist","audio","color","id","uuidv4","active","Player","currentSong","setCurrentSong","isPlaying","setIsPlaying","audioRef","songInfo","setSongInfo","songs","setSongs","song","getTime","time","Math","floor","slice","useEffect","newSongs","map","skipTrackHandler","direction","a","currentIndex","findIndex","length","current","play","className","duration","currentTime","min","max","value","onChange","e","target","type","onClick","icon","faAngleLeft","size","pause","faPause","faPlay","faAngleRight","Song","src","alt","LibrarySong","songSelectHandler","selectedSong","filter","state","Library","libraryStatus","Nav","setLibraryStatus","faMusic","App","useRef","useState","data","timeUpdateHandler","songEndHandler","onLoadedMetadata","onTimeUpdate","ref","onEnded","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAyBeA,MAvBf,WACI,MAAM,CACF,CACIC,KAAM,YACNC,MAAO,yGACPC,OAAQ,0BACRC,MAAO,gDACPC,MAAO,CAAC,UAAW,WACnBC,GAAIC,cACJC,QAAQ,GAEZ,CACAP,KAAM,cACFC,MAAO,yGACPC,OAAQ,wBACRC,MAAO,gDACPC,MAAO,CAAC,UAAW,WACnBC,GAAIC,cACJC,QAAQ,K,4BC2ELC,EA3FA,SAAC,GACgE,IAD9DC,EAC6D,EAD7DA,YAAaC,EACgD,EADhDA,eAAgBC,EACgC,EADhCA,UAC3CC,EAA2E,EAA3EA,aAAcC,EAA6D,EAA7DA,SAAUC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,MAAaC,GAAe,EAArBC,KAAqB,EAAfD,UAY1DE,EAAU,SAACC,GACb,OACIC,KAAKC,MAAMF,EAAO,IAAM,KAAO,IAAMC,KAAKC,MAAMF,EAAO,KAAKG,OAAO,IAK3EC,qBAAU,WACN,IAAMC,EAAWT,EAAMU,KAAI,SAACR,GACxB,OAAGA,EAAKb,KAAOI,EAAYJ,GACvB,2BACOa,GADP,IAEIX,QAAQ,IAGZ,2BACOW,GADP,IAEIX,QAAQ,OAIhBU,EAASQ,KACV,CAAChB,IAER,IAKMkB,EAAgB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACjBC,EAAed,EAAMe,WAAU,SAACb,GAAD,OAAUA,EAAKb,KAAOI,EAAYJ,MACpD,iBAAduB,EAFkB,gCAGXlB,EAAeM,GAAOc,EAAe,GAAKd,EAAMgB,SAHrC,UAKJ,cAAdJ,EALkB,qBAMbE,EAAc,GAAKd,EAAMgB,UAAY,EANxB,iCAOPtB,EAAeM,EAAMA,EAAMgB,OAAS,IAP7B,cAQVrB,GAAWE,EAASoB,QAAQC,OARlB,2BAWjBxB,EAAeM,GAAOc,GAAgB,GAAKd,EAAMgB,SAXhC,QAalBrB,GAAWE,EAASoB,QAAQC,OAbV,4CAAH,sDAgBtB,OACI,sBAAKC,UAAU,SAAf,UACI,sBAAKA,UAAU,eAAf,UACI,4BAAIrB,EAASsB,SAAWjB,EAAQL,EAASuB,aAAe,SACxD,uBACIC,IAAK,EACLC,IAAKzB,EAASsB,UAAY,EAC1BI,MAAO1B,EAASuB,YAChBI,SA7BI,SAACC,GACjB7B,EAASoB,QAAQI,YAAcK,EAAEC,OAAOH,MACxCzB,EAAY,2BAAID,GAAL,IAAeuB,YAAaK,EAAEC,OAAOH,UA4BpCI,KAAK,UACT,4BAAIzB,EAAQL,EAASsB,eAEzB,sBAAKD,UAAU,eAAf,UACI,cAAC,IAAD,CACIU,QAAS,kBAAMlB,EAAiB,cAChCQ,UAAU,YACVW,KAAMC,IACNC,KAAK,OACT,cAAC,IAAD,CACIH,QA1EQ,WAChBlC,GACAE,EAASoB,QAAQgB,QACjBrC,GAAcD,KAEdE,EAASoB,QAAQC,OACjBtB,GAAcD,KAqENwB,UAAU,OACVW,KAAMnC,EAAYuC,IAAUC,IAC5BH,KAAK,OACT,cAAC,IAAD,CACIH,QAAS,kBAAMlB,EAAiB,iBAChCQ,UAAU,eACVW,KAAMM,IACNJ,KAAK,cC3ENK,EAZF,SAAC,GAAmB,IAAlB5C,EAAiB,EAAjBA,YACX,OACI,sBAAK0B,UAAU,iBAAf,UACI,qBAAKmB,IAAK7C,EAAYR,MAAOsD,IAAK9C,EAAYT,OAC9C,6BAAKS,EAAYT,OACjB,6BAAKS,EAAYP,aC6BdsD,EAlCK,SAAC,GAAsE,IAArEtC,EAAoE,EAApEA,KAAMF,EAA8D,EAA9DA,MAAON,EAAuD,EAAvDA,eAAgBL,EAAuC,EAAvCA,GAAIQ,EAAmC,EAAnCA,SAAUF,EAAyB,EAAzBA,UAAWM,EAAc,EAAdA,SACtEwC,EAAiB,uCAAG,8BAAA5B,EAAA,6DACpB6B,EAAe1C,EAAM2C,QAAO,SAACC,GAAD,OAAWA,EAAMvD,KAAOA,KADhC,SAEhBK,EAAegD,EAAa,IAFZ,OAGpBjC,EAAWT,EAAMU,KAAI,SAACR,GACxB,OAAGA,EAAKb,KAAOA,EACX,2BACOa,GADP,IAEIX,QAAQ,IAGZ,2BACOW,GADP,IAEIX,QAAQ,OAIhBU,EAASQ,GACNd,GAAWE,EAASoB,QAAQC,OAjBT,2CAAH,qDAoBnB,OACI,sBAAKW,QAASY,EAAmBtB,UAAS,uBAAkBjB,EAAKX,OAAS,WAAa,IAAvF,UACI,qBAAK+C,IAAKpC,EAAKjB,MAAOsD,IAAKrC,EAAKlB,OAChC,sBAAKmC,UAAU,mBAAf,UACA,6BAAKjB,EAAKlB,OACV,6BAAKkB,EAAKhB,gBCHP2D,EAtBC,SAAC,GAA2E,IAA1E7C,EAAyE,EAAzEA,MAAON,EAAkE,EAAlEA,eAAgBG,EAAkD,EAAlDA,SAAUF,EAAwC,EAAxCA,UAAWM,EAA6B,EAA7BA,SAAU6C,EAAmB,EAAnBA,cACpE,OACI,sBAAK3B,UAAS,kBAAa2B,EAAgB,iBAAmB,IAA9D,UACI,yCACA,qBAAK3B,UAAU,gBAAf,SACKnB,EAAMU,KAAI,SAACR,GAAD,OACf,cAAC,EAAD,CACIF,MAAOA,EACPN,eAAgBA,EAChBQ,KAAMA,EACNL,SAAUA,EACVR,GAAIa,EAAKb,GAETM,UAAWA,EACXM,SAAUA,GAFLC,EAAKb,aCEX0D,EAZH,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,iBAAkBF,EAAmB,EAAnBA,cAC5B,OACI,gCACI,uCACA,yBAAQjB,QAAS,kBAAMmB,GAAkBF,IAAzC,oBAEI,cAAC,IAAD,CAAiBhB,KAAMmB,aCwDxBC,MAtDf,WACA,IAAMrD,EAAWsD,iBAAO,MADT,EAGiBC,mBAAS,CAAC/B,YAAa,EAAGD,SAAU,IAHrD,mBAGRtB,EAHQ,KAGEC,EAHF,OAIWqD,mBAASC,KAJpB,mBAIRrD,EAJQ,KAIDC,EAJC,OAKuBmD,mBAASpD,EAAM,IALtC,mBAKRP,EALQ,KAKKC,EALL,OAMmB0D,oBAAS,GAN5B,mBAMRzD,EANQ,KAMGC,EANH,OAO2BwD,oBAAS,GAPpC,mBAORN,EAPQ,KAOOE,EAPP,KASTM,EAAoB,SAAC5B,GAC3B,IAAMT,EAAUS,EAAEC,OAAON,YACnBD,EAAWM,EAAEC,OAAOP,SACxBrB,EAAY,2BAAID,GAAL,IAAeuB,YAAaJ,EAASG,eAE5CmC,EAAc,uCAAG,4BAAA1C,EAAA,6DACjBC,EAAed,EAAMe,WAAU,SAACb,GAAD,OAAUA,EAAKb,KAAOI,EAAYJ,MADhD,SAEbK,EAAeM,GAAOc,EAAe,GAAKd,EAAMgB,SAFnC,2CAAH,qDAIlB,OACE,sBAAKG,UAAU,MAAf,UACA,cAAC,EAAD,CAAK2B,cAAeA,EAAeE,iBAAkBA,IACrD,cAAC,EAAD,CAAMvD,YAAaA,IACnB,cAAC,EAAD,CACEI,SAAUA,EACVD,aAAcA,EACdH,YAAaA,EACbE,UAAWA,EACXG,SAAUA,EACVC,YAAaA,EACbC,MAAOA,EACPC,SAAUA,EACVP,eAAgBA,IAElB,cAAC,EAAD,CACEM,MAAOA,EACPN,eAAgBA,EAChBG,SAAUA,EACVF,UAAWA,EACXM,SAAUA,EACV6C,cAAeA,EACfE,iBAAkBA,IAEpB,uBACEQ,iBAAkBF,EAClBG,aAAcH,EACdI,IAAK7D,EACLyC,IAAK7C,EAAYN,MACjBwE,QAASJ,QChDAK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.03e2f331.chunk.js","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction chillHop() {\r\n    return[\r\n        {\r\n            name: \"Sugarless\",\r\n            cover: \"https://chillhop.com/wp-content/uploads/2020/11/8a0c857ddad531279d0757f5362380a6837b1b69-1024x1024.jpg\",\r\n            artist: \"The Field Tapes, Aviino\",\r\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=11243\",\r\n            color: [\"#205950\", \"#2ab3bf\"],\r\n            id: uuidv4(),\r\n            active: true,\r\n        },\r\n        {\r\n        name: \"Lax Incense\",\r\n            cover: \"https://chillhop.com/wp-content/uploads/2021/01/6b1bb8736ee3e972747bc11f312e31cf7f5823e4-1024x1024.jpg\",\r\n            artist: \"Mama Aiuto, DaphnÃ©\",\r\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=12125\",\r\n            color: [\"#BA4A46\", \"#FDF0DD\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n        }\r\n    ]\r\n}\r\n\r\nexport default chillHop;","import React, {useState, useEffect} from 'react';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {faPlay, faPause, faAngleLeft, faAngleRight} from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nconst Player = ({ currentSong, setCurrentSong, isPlaying, \r\n    setIsPlaying, audioRef, songInfo, setSongInfo, songs, song, setSongs }) => {\r\n//Event Handlers\r\nconst playSongHandler = () => {\r\n    if (isPlaying) {\r\n        audioRef.current.pause();\r\n        setIsPlaying(!isPlaying);\r\n    } else {\r\n        audioRef.current.play();\r\n        setIsPlaying(!isPlaying);\r\n    }\r\n};\r\n\r\nconst getTime = (time) => {\r\n    return(\r\n        Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n};\r\n\r\n//useEffect\r\nuseEffect(() => {\r\n    const newSongs = songs.map((song) => {\r\n        if(song.id === currentSong.id){\r\n            return{\r\n                ...song,\r\n                active: true,\r\n            }\r\n        }else{\r\n            return{\r\n                ...song,\r\n                active: false,\r\n            }\r\n        }\r\n        });\r\n        setSongs(newSongs);\r\n    }, [currentSong]);\r\n\r\nconst dragHandler = (e) => {\r\n    audioRef.current.currentTime = e.target.value;\r\n    setSongInfo({...songInfo, currentTime: e.target.value});\r\n}\r\n\r\nconst skipTrackHandler = async (direction) => {\r\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\r\n    if(direction === \"skip-forward\") {\r\n        await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\r\n    }\r\n    if(direction === \"skip-back\") {\r\n        if((currentIndex -1) % songs.length === -1){\r\n            await setCurrentSong(songs[songs.length - 1]);\r\n            if(isPlaying) audioRef.current.play();\r\n            return\r\n        }\r\n        setCurrentSong(songs[(currentIndex + -1) % songs.length]);\r\n    }\r\n    if(isPlaying) audioRef.current.play();\r\n    };\r\n\r\nreturn(\r\n    <div className=\"player\">\r\n        <div className=\"time-control\">\r\n            <p>{songInfo.duration ? getTime(songInfo.currentTime) : \"0:00\"}</p>\r\n            <input \r\n                min={0} \r\n                max={songInfo.duration || 0} \r\n                value={songInfo.currentTime} \r\n                onChange={dragHandler}\r\n                type=\"range\"/>\r\n            <p>{getTime(songInfo.duration)}</p>\r\n        </div>\r\n        <div className=\"play-control\">\r\n            <FontAwesomeIcon\r\n                onClick={() => skipTrackHandler('skip-back')} \r\n                className=\"skip-back\" \r\n                icon={faAngleLeft} \r\n                size=\"2x\" />\r\n            <FontAwesomeIcon \r\n                onClick={playSongHandler} \r\n                className=\"play\" \r\n                icon={isPlaying ? faPause : faPlay } \r\n                size=\"2x\" />\r\n            <FontAwesomeIcon\r\n                onClick={() => skipTrackHandler('skip-forward')} \r\n                className=\"skip-forward\" \r\n                icon={faAngleRight} \r\n                size=\"2x\" />\r\n        </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Player;","import React from 'react';\r\n\r\nconst Song = ({currentSong}) => {\r\n    return(\r\n        <div className=\"song-container\">\r\n            <img src={currentSong.cover} alt={currentSong.name}></img>\r\n            <h2>{currentSong.name}</h2>\r\n            <h3>{currentSong.artist}</h3>\r\n        </div>\r\n        \r\n\r\n    )\r\n}\r\n\r\nexport default Song;","import React from 'react';\r\n\r\nconst LibrarySong = ({song, songs, setCurrentSong, id, audioRef, isPlaying, setSongs}) => {\r\nconst songSelectHandler = async () => {\r\nconst selectedSong = songs.filter((state) => state.id === id);\r\n    await setCurrentSong(selectedSong[0]);\r\nconst newSongs = songs.map((song) => {\r\n    if(song.id === id){\r\n        return{\r\n            ...song,\r\n            active: true,\r\n        }\r\n    }else{\r\n        return{\r\n            ...song,\r\n            active: false,\r\n        }\r\n    }\r\n    });\r\n    setSongs(newSongs);\r\n    if(isPlaying) audioRef.current.play();\r\n    };\r\n        \r\n    return(\r\n        <div onClick={songSelectHandler} className={`library-song ${song.active ? 'selected' : \"\"}`}>\r\n            <img src={song.cover} alt={song.name}></img>\r\n            <div className=\"song-description\">\r\n            <h3>{song.name}</h3>\r\n            <h4>{song.artist}</h4>\r\n            </div>\r\n        </div>\r\n        \r\n\r\n    )\r\n}\r\n\r\nexport default LibrarySong;","import React from 'react';\r\nimport LibrarySong from './LibrarySong';\r\n\r\nconst Library = ({songs, setCurrentSong, audioRef, isPlaying, setSongs, libraryStatus}) => {\r\n    return(\r\n        <div className={`library ${libraryStatus ? 'active-library' : ''}`}>\r\n            <h2>Library</h2>\r\n            <div className=\"library-songs\">\r\n                {songs.map((song) => (\r\n            <LibrarySong \r\n                songs={songs} \r\n                setCurrentSong={setCurrentSong} \r\n                song={song}\r\n                audioRef={audioRef}\r\n                id={song.id}\r\n                key={song.id}\r\n                isPlaying={isPlaying}\r\n                setSongs={setSongs}\r\n            />\r\n            ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Library;","import React from 'react'\r\nimport {fontawesome} from '@fortawesome/react-fontawesome'\r\nimport {faMusic} from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst Nav = ({setLibraryStatus, libraryStatus}) => {\r\n    return(\r\n        <nav>\r\n            <h1>Waves</h1>\r\n            <button onClick={() => setLibraryStatus(!libraryStatus)}>\r\n                Library\r\n                <FontAwesomeIcon icon={faMusic} />\r\n            </button>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Nav;","import React, { useState, useRef } from 'react'\nimport data from './data'\n\n//Styles\nimport \"./styles/app.scss\";\nimport \"./styles/_library.scss\"\n\n//Components\nimport Player from './components/Player'\nimport Song from './components/Song'\nimport Library from './components/Library'\nimport Nav from './components/Nav'\n\nfunction App() {\nconst audioRef = useRef(null);\n//State\nconst [songInfo, setSongInfo] = useState({currentTime: 0, duration: 0});\nconst [songs, setSongs] = useState(data());\nconst [currentSong, setCurrentSong] = useState(songs[0]);\nconst [isPlaying, setIsPlaying] = useState(false);\nconst [libraryStatus, setLibraryStatus] = useState(false);\n  \nconst timeUpdateHandler = (e) => {\nconst current = e.target.currentTime;\nconst duration = e.target.duration;\n  setSongInfo({...songInfo, currentTime: current, duration})\n};\nconst songEndHandler = async () => {\n  let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n}\n  return (\n    <div className=\"App\">\n    <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n    <Song currentSong={currentSong} />\n    <Player \n      audioRef={audioRef}\n      setIsPlaying={setIsPlaying}\n      currentSong={currentSong}\n      isPlaying={isPlaying}\n      songInfo={songInfo}\n      setSongInfo={setSongInfo}\n      songs={songs}\n      setSongs={setSongs}\n      setCurrentSong={setCurrentSong}\n      />\n    <Library \n      songs={songs}\n      setCurrentSong={setCurrentSong}\n      audioRef={audioRef}\n      isPlaying={isPlaying}\n      setSongs={setSongs}\n      libraryStatus={libraryStatus}\n      setLibraryStatus={setLibraryStatus}\n    />\n    <audio \n      onLoadedMetadata={timeUpdateHandler} \n      onTimeUpdate={timeUpdateHandler} \n      ref={audioRef} \n      src={currentSong.audio}\n      onEnded={songEndHandler}\n      >\n      </audio>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}